{"componentChunkName":"component---src-templates-speaker-tsx","path":"/talk/okuno-kentaro","webpackCompilationHash":"597bf28fa467e3d1e1d8","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"speakers":[{"uuid":"okuno-kentaro","name":"奥野 賢太郎","biography":"Front-end developer and Node.js back-end developer, Web Audio Engineer","biographyJa":"クレスウェア代表、Angular日本ユーザー会オーガナイザ。DDDを用いた大規模アプリケーション設計・開発を得意とし、TypeScriptを用いたクライアントサイド・サーバーサイド開発を手掛ける。"}],"avatars":[{"originalName":"okuno-kentaro.jpg","originalImg":"/2019/static/be9f5547d44799f89dbb316385300897/6c12c/okuno-kentaro.jpg","aspectRatio":1,"src":"/2019/static/be9f5547d44799f89dbb316385300897/2be9e/okuno-kentaro.jpg","srcSet":"/2019/static/be9f5547d44799f89dbb316385300897/79993/okuno-kentaro.jpg 66w,\n/2019/static/be9f5547d44799f89dbb316385300897/2e0c2/okuno-kentaro.jpg 131w,\n/2019/static/be9f5547d44799f89dbb316385300897/2be9e/okuno-kentaro.jpg 262w,\n/2019/static/be9f5547d44799f89dbb316385300897/6c12c/okuno-kentaro.jpg 362w","srcWebp":"/2019/static/be9f5547d44799f89dbb316385300897/fabb6/okuno-kentaro.webp","srcSetWebp":"/2019/static/be9f5547d44799f89dbb316385300897/7fc16/okuno-kentaro.webp 66w,\n/2019/static/be9f5547d44799f89dbb316385300897/78dfd/okuno-kentaro.webp 131w,\n/2019/static/be9f5547d44799f89dbb316385300897/fabb6/okuno-kentaro.webp 262w,\n/2019/static/be9f5547d44799f89dbb316385300897/92734/okuno-kentaro.webp 362w","sizes":"(max-width: 262px) 100vw, 262px"}],"talk":{"uuid":"okuno-kentaro","title":"Building the layered server application achieved by InversifyJS","titleJa":"InversifyJSを用いたレイヤードアーキテクチャの構築","description":"We have traditionally suffered from tightly coupled applications. The complexity of dependencies hinders testing and leads to confusion. Let's simplify it using the library InversifyJS for DIP (Dependency Inversion Principle).\n\nI will introduce the construction of a server application that combines InversifyJS, Knex.js, Express, and TypeScript.","descriptionJa":"我々はかつてから、大きなアプリケーションを開発する際に、密結合に悩まされてきました。 依存関係の複雑さがテストを妨げ、生産性を低下させます。そこでDIP（依存性逆転の原則）を実現するためのライブラリ \"InversifyJS\"を導入することで、この問題を解決しましょう。\n\nInversifyJS, Knex.js, Express、そしてTypeScriptを組み合わせたサーバーアプリケーションの設計を紹介します。","spokenLanguage":"ja","slideLanguage":"","speakerIDs":["okuno-kentaro"],"date":"day2","startsAt":"11:00","endsAt":"11:30","room":"C"}}}}