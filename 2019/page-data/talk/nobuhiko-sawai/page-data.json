{"componentChunkName":"component---src-templates-speaker-tsx","path":"/talk/nobuhiko-sawai","webpackCompilationHash":"1cb28654c1fce38b26e0","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"speakers":[{"uuid":"nobuhiko-sawai","name":"澤井宣彦","biography":"","biographyJa":"株式会社FiNC Technologiesにて、Railsを用いたマイクロサービスアーキテクチャによるアプリのサーバサイドとReact.jsを用いた法人向けサービスのフロントエンド開発を担当する。"}],"avatars":[{"originalName":"nobuhiko-sawai.jpg","originalImg":"/2019/static/9b9f3b02ed298d2cf0bb16db141f8259/9067c/nobuhiko-sawai.jpg","aspectRatio":1,"src":"/2019/static/9b9f3b02ed298d2cf0bb16db141f8259/9067c/nobuhiko-sawai.jpg","srcSet":"/2019/static/9b9f3b02ed298d2cf0bb16db141f8259/79993/nobuhiko-sawai.jpg 66w,\n/2019/static/9b9f3b02ed298d2cf0bb16db141f8259/2e0c2/nobuhiko-sawai.jpg 131w,\n/2019/static/9b9f3b02ed298d2cf0bb16db141f8259/9067c/nobuhiko-sawai.jpg 200w","srcWebp":"/2019/static/9b9f3b02ed298d2cf0bb16db141f8259/d27e9/nobuhiko-sawai.webp","srcSetWebp":"/2019/static/9b9f3b02ed298d2cf0bb16db141f8259/7fc16/nobuhiko-sawai.webp 66w,\n/2019/static/9b9f3b02ed298d2cf0bb16db141f8259/78dfd/nobuhiko-sawai.webp 131w,\n/2019/static/9b9f3b02ed298d2cf0bb16db141f8259/d27e9/nobuhiko-sawai.webp 200w","sizes":"(max-width: 200px) 100vw, 200px"}],"talk":{"uuid":"nobuhiko-sawai","title":"Performance tuning in EC site with GraphQL","titleJa":"GraphQLを用いたECサイトにおけるパフォーマンス改善","description":"Overview: This talk will be about performance tuning based on actual case he experienced during renewal of E-Commerce site. The site is powered by GraphQL + React + SSR, and he will be talking about basic performance tuning as well as actual usecase of GraphQL.\n\nDuring renewal, we were using GraphQL + React + SSR, but as a result of prioritizing the release, the performance was not up to par, and speed insight showed 20s. As E-Commerce site requires decent amounf of items, and show special sales at time, the approach to improving the performance can be a bit different from static sites such as news websites. With this renewal, we were able to improve performance of a non-performant site to xxx (improvent is ongoing).\n\nWe will go in details for:\n\n- Separating the issue by applying appropriate performance measurement, using tools such as Speed insight and increasee performance of server by using APM tools usch as DataDog.\n- Improvement in Fronet-end side. (reducing bundle size, and utilizing lazy-loading)\n- Manage cache approprately (using HTML cache and separate user belonging contents to design GraphQL queries that can easily be cached.)","descriptionJa":"概要: ECサイトリニューアルにおける事例を題材にサービスの性能改善の方法を実際の事例をもとにお話します。該当のサイトはGraphQL + React + SSRを導入しており、ベーシックな性能改善の話からGraphQLの活用例まで含めてお話する予定です。\n\nECサイトはリニューアル時にはGraphQL + React + SSRといった構成を採用していましたが、リリースを優先した結果、性能が十分ではなく、speed insightで20点台でした。ECサイトは商品数やキャンペーンによる価格変更などがあり、ニュースサイトのような静的コンテンツの多いサイトとは異なるパフォーマンス改善が求められます。こうした非常に低いパフォーマンスのサイトをn点（現在鋭意改善中）まで引き上げた事例を紹介します。\n\n具体的には以下のような内容を紹介する予定です。\n* 計測環境の導入による課題の抽出 (Speed insightの活用やDatadogなどのAPMツールを活用した計測環境の導入とそれによるサーバー側のパフォーマンス改善など）\n* フロントエンドサイドにおける改善 (bundle sizeの改善やlazy-loadの導入）\n* キャッシュ戦略 (HTML cacheやuser belongingなコンテンツを分離することによるcacheの効きやすいGraphQLのquery設計）","spokenLanguage":"ja","slideLanguage":"","speakerIDs":["nobuhiko-sawai"],"date":"day2","startsAt":"14:15","endsAt":"14:45","room":"B"}}}}