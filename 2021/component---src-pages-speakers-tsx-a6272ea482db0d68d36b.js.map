{"version":3,"sources":["webpack://jsconfjp-2021/./src/components/Breadcrumb.tsx","webpack://jsconfjp-2021/./src/components/ResponsiveBox.tsx","webpack://jsconfjp-2021/./src/components/Speaker.tsx","webpack://jsconfjp-2021/./src/components/SpeakerList.tsx","webpack://jsconfjp-2021/./src/components/Title.tsx","webpack://jsconfjp-2021/./src/pages/speakers.tsx","webpack://jsconfjp-2021/./src/util/languages.ts"],"names":["Box","styled","Text","theme","fonts","header","Breadcrumb","props","path","t","useTranslation","Link","to","filter","Boolean","map","label","key","innerWidth","ResponsiveBox","children","LinkContainer","colors","text","Avatar","Image","Title","border","Name","Speaker","i18n","talk","speaker","avatar","uuid","title","titleJa","name","withPrefix","image","alt","loading","enOrJa","lang","Container","breakpoints","mobile","SpeakerList","speakers","avatars","talkMap","talks","reduce","acc","String","avatarMap","presentations","length","SpeakersPage","useStaticQuery","allSpeakersYaml","allTalksYaml","allFile","edges","node","nodes","childImageSharp","gatsbyImageData","description","enStr","jaStr","language","test"],"mappings":"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","file":"component---src-pages-speakers-tsx-a6272ea482db0d68d36b.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport { useTranslation } from \"react-i18next\"\nimport { Link } from \"gatsby\"\n\nexport type Props = {\n  path: (string | { label: string; to: string })[]\n}\n\nconst Box = styled.div`\n  display: flex;\n`\nconst Text = styled.span`\n  margin-right: 0.5em;\n  font-size: 1.4rem;\n  font-weight: bold;\n  text-transform: uppercase;\n  font-family: ${({ theme }) => theme.fonts.header};\n  text-transform: uppercase;\n`\n\nexport function Breadcrumb(props: Props) {\n  const { path } = props\n  const { t } = useTranslation()\n\n  return (\n    <Box>\n      <Link to=\"/\">\n        <Text>{t(\"top\")}</Text>\n      </Link>\n      {path.filter(Boolean).map(label => {\n        const path = typeof label === \"string\" ? { label, to: null } : label\n        return (\n          <React.Fragment key={path.label}>\n            <Text>&gt;</Text>\n            {path.to ? (\n              <Link to={path.to}>\n                <Text>{path.label}</Text>\n              </Link>\n            ) : (\n              <Text>{path.label}</Text>\n            )}\n          </React.Fragment>\n        )\n      })}\n    </Box>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nexport type Props = {\n  children: React.ReactNode\n}\n\nconst Box = styled.div`\n  width: 100%;\n  max-width: ${({ theme }) => theme.innerWidth};\n  padding: 2em 1em 5em;\n  margin: 0 auto;\n  box-sizing: border-box;\n`\n\nexport function ResponsiveBox(props: Props) {\n  const { children } = props\n\n  return <Box>{children}</Box>\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Link, withPrefix } from \"gatsby\"\nimport { useTranslation } from \"react-i18next\"\nimport { GatsbyImage as Image, IGatsbyImageData } from \"gatsby-plugin-image\"\nimport { enOrJa } from \"../util/languages\"\n\nexport type TalkType = {\n  uuid: string\n  title: string\n  titleJa: string\n  description: string\n  descriptionJa: string\n  spokenLanguage: string\n  slideLanguage: string\n  speakerIDs: string[]\n  date: \"day1\"\n  startsAt: string\n  endsAt: string\n  hiddenTimeBoxes: string[] | null\n  room: \"A\" | \"B\"\n}\n\nexport type SpeakerType = {\n  uuid: string\n  name: string\n  biography: string\n  biographyJa: string\n  presentations: string[]\n  github: string\n  twitter: string\n}\n\nexport type AvatarType = {\n  uuid: string\n} & IGatsbyImageData\n\nexport type Props = {\n  speaker: SpeakerType\n  avatar: AvatarType\n  talk: TalkType\n}\n\nconst LinkContainer = styled(Link)`\n  text-decoration: none;\n  color: ${({ theme }) => theme.colors.text};\n`\nconst Avatar = styled(Image)`\n  width: 100%;\n  max-width: 273px;\n`\nconst Title = styled.h2`\n  margin: 0;\n  padding: 10px;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.border};\n  text-align: center;\n  font-family: ${({ theme }) => theme.fonts.text};\n  font-size: 2rem;\n  overflow-wrap: break-word;\n  word-break: break-word;\n  hyphens: auto;\n`\nconst Name = styled.p`\n  margin-bottom: 0;\n  text-align: center;\n  font-family: ${({ theme }) => theme.fonts.text};\n  font-size: 1.6rem;\n`\n\nexport function Speaker(props: Props) {\n  const { i18n } = useTranslation()\n  const { talk, speaker, avatar } = props\n  const { uuid, title, titleJa } = talk\n  const { name } = speaker\n\n  if (!uuid || title === \"TBA\") {\n    return (\n      <div>\n        <Avatar image={avatar} alt={name} loading=\"lazy\" />\n        <Title lang=\"en\">{enOrJa(i18n)(title, titleJa)}</Title>\n        <Name>{name}</Name>\n      </div>\n    )\n  }\n\n  return (\n    <LinkContainer to={`/${withPrefix(\"\")}talk/${uuid}`}>\n      <Avatar image={avatar} alt={name} loading=\"lazy\" />\n      <Title>{enOrJa(i18n)(title, titleJa)}</Title>\n      <Name>{name}</Name>\n    </LinkContainer>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Speaker, SpeakerType, TalkType, AvatarType } from \"./Speaker\"\n\nexport type Props = {\n  speakers: SpeakerType[]\n  avatars: AvatarType[]\n  talks: TalkType[]\n}\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-column-gap: 60px;\n  grid-row-gap: 60px;\n\n  ${({ theme }) => theme.breakpoints.mobile} {\n    grid-template-columns: repeat(2, 1fr);\n    grid-column-gap: 20px;\n    grid-row-gap: 20px;\n  }\n`\n\nexport function SpeakerList(props: Props) {\n  const { speakers, avatars, talks } = props\n  const talkMap = talks.reduce((acc, talk) => {\n    acc[String(talk.uuid)] = talk as TalkType\n    return acc\n  }, {} as { [uuid: string]: TalkType })\n  const avatarMap: { [uuid: string]: AvatarType } = avatars.reduce(\n    (acc, avatar) => ({ ...acc, [avatar.uuid]: avatar }),\n    {}\n  )\n\n  return (\n    <Container>\n      {speakers\n        .filter(speaker => {\n          return speaker.presentations.length > 0\n        })\n        .map(speaker => {\n          return (\n            <Speaker\n              key={speaker.name}\n              speaker={speaker}\n              talk={talkMap[speaker.presentations[0]]}\n              avatar={avatarMap[speaker.uuid]}\n            />\n          )\n        })}\n    </Container>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nexport type Props = {\n  children: React.ReactNode\n}\n\nconst Box = styled.h1`\n  text-align: center;\n  margin: 40px 0 60px;\n  font-size: 4rem;\n  text-transform: none;\n  font-family: ${({ theme }) => theme.fonts.header};\n`\n\nexport function Title(props: Props) {\n  const { children } = props\n\n  return <Box>{children}</Box>\n}\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { Layout } from \"../components/Layout\"\nimport { SEO } from \"../components/Seo\"\nimport { Title } from \"../components/Title\"\nimport { SpeakerList } from \"../components/SpeakerList\"\nimport { ResponsiveBox } from \"../components/ResponsiveBox\"\nimport { Breadcrumb } from \"../components/Breadcrumb\"\n\nexport default function SpeakersPage() {\n  const { allSpeakersYaml, allTalksYaml, allFile } = useStaticQuery(graphql`\n    query Speakers {\n      allSpeakersYaml {\n        edges {\n          node {\n            uuid\n            name\n            biography\n            biographyJa\n            presentations\n          }\n        }\n      }\n      allTalksYaml {\n        edges {\n          node {\n            uuid\n            title\n            titleJa\n            description\n            descriptionJa\n            spokenLanguage\n            slideLanguage\n            speakerIDs\n          }\n        }\n      }\n      allFile(filter: { relativePath: { regex: \"/speakers/\" } }) {\n        nodes {\n          name\n          childImageSharp {\n            gatsbyImageData(\n              width: 524\n              height: 524\n              placeholder: BLURRED\n              layout: CONSTRAINED\n            )\n          }\n        }\n      }\n    }\n  `)\n  const { t } = useTranslation()\n  const speakers = allSpeakersYaml.edges.map(({ node }: any) => node)\n  const avatars = allFile.nodes\n    .filter((avatar: any) => avatar.childImageSharp)\n    .map((avatar: any) => ({\n      uuid: avatar.name,\n      ...avatar.childImageSharp.gatsbyImageData\n    }))\n  const talks = allTalksYaml.edges.map(({ node }: any) => node)\n\n  return (\n    <Layout>\n      <SEO title={t(\"speakers\")} description={t(\"speakers.description\")} />\n      <ResponsiveBox>\n        <Breadcrumb path={[t(\"speakers\")]} />\n        <Title>{t(\"speakers\")}</Title>\n        <SpeakerList speakers={speakers} avatars={avatars} talks={talks} />\n      </ResponsiveBox>\n    </Layout>\n  )\n}\n","import { i18n } from \"i18next\"\n\nexport function enOrJa(i18n: i18n) {\n  return (enStr: string, jaStr: string) =>\n    isJapanese(i18n.language) && jaStr ? jaStr : enStr || jaStr\n}\n\nexport function isJapanese(lang: string) {\n  return /ja(-\\w)*/.test(lang)\n}\n"],"sourceRoot":""}